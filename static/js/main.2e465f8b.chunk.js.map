{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","className","onClick","delTodo","Component","Todos","todos","map","key","Header","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","placeholder","App","uuid","v4","filter","alert","newTodo","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e465f8b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      background: '#f4f4f4',\r\n      padding: '10px',\r\n      borderBottom: '1px #ccc dotted',\r\n      textDecoration: this.props.todo.completed ? 'line-through' : 'none',\r\n    };\r\n  };\r\n\r\n  render() {\r\n    const {id, title} = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(this, id)}\r\n          />{' '}\r\n          {title}\r\n          <button\r\n            className=\"btn-close\"\r\n            onClick={this.props.delTodo.bind(this, id)}\r\n          >\r\n            x\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todo={todo}\r\n        markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport '../../App.css';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Todo List</h1>\r\n    </header>\r\n  );\r\n}\r\n","import React, {Component} from 'react';\r\nimport '../App.css';\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: '',\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({\r\n      title: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add to-do...\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"btn-submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport uuid from 'uuid';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    todos: [\n      {\n        id: uuid.v4(),\n        title: 'Take out the trash',\n        completed: false,\n      },\n      {\n        id: uuid.v4(),\n        title: 'Feed the dogs',\n        completed: false,\n      },\n      {\n        id: uuid.v4(),\n        title: 'Study JavaScript',\n        completed: false,\n      },\n    ],\n  };\n\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  //Delete Todo\n  delTodo = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n    });\n  };\n\n  //Add Todo\n  addTodo = (title) => {\n    if (title === '') {\n      alert('To-do is empty!');\n    } else {\n      const newTodo = {\n        id: uuid.v4(),\n        title: title,\n        completed: false,\n      };\n      this.setState({\n        todos: [...this.state.todos, newTodo],\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <AddTodo addTodo={this.addTodo} />\n          <Todos\n            todos={this.state.todos}\n            markComplete={this.markComplete}\n            delTodo={this.delTodo}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}